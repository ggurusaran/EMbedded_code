
stm32f103xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005b4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e4  080006ec  000016ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006e4  080006e4  000016ec  2**0
                  CONTENTS
  4 .ARM          00000000  080006e4  080006e4  000016ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e4  080006ec  000016ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e4  080006e4  000016e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006e8  080006e8  000016e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006ec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006ec  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000091a  00000000  00000000  00001715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000264  00000000  00000000  0000202f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00002298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000093  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001dc8  00000000  00000000  000023fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f00  00000000  00000000  000041c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000081e3  00000000  00000000  000050c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000d2a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002b0  00000000  00000000  0000d2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0000d59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080006cc 	.word	0x080006cc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080006cc 	.word	0x080006cc

08000170 <GPIO_Init>:
}
/*
 * Init and De-Init
 */
//1) NORMAL GPIO MODE SET.
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	GPIO_Regdef_t *pGPIOx = pGPIOHandle->pGPIOx;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	60fb      	str	r3, [r7, #12]

	if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) < 8) {
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	791b      	ldrb	r3, [r3, #4]
 8000182:	2b07      	cmp	r3, #7
 8000184:	d81c      	bhi.n	80001c0 <GPIO_Init+0x50>
		pGPIOx->CRL &= ~(0xFU << ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) * 4));
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	681a      	ldr	r2, [r3, #0]
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	791b      	ldrb	r3, [r3, #4]
 800018e:	009b      	lsls	r3, r3, #2
 8000190:	210f      	movs	r1, #15
 8000192:	fa01 f303 	lsl.w	r3, r1, r3
 8000196:	43db      	mvns	r3, r3
 8000198:	401a      	ands	r2, r3
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	601a      	str	r2, [r3, #0]
	    pGPIOx->CRL |= (((pGPIOHandle->GPIO_PinConfig.GPIO_PinCnf) << 2 | (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)) << ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) * 4));
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	687a      	ldr	r2, [r7, #4]
 80001a4:	7992      	ldrb	r2, [r2, #6]
 80001a6:	0092      	lsls	r2, r2, #2
 80001a8:	6879      	ldr	r1, [r7, #4]
 80001aa:	7949      	ldrb	r1, [r1, #5]
 80001ac:	4311      	orrs	r1, r2
 80001ae:	687a      	ldr	r2, [r7, #4]
 80001b0:	7912      	ldrb	r2, [r2, #4]
 80001b2:	0092      	lsls	r2, r2, #2
 80001b4:	fa01 f202 	lsl.w	r2, r1, r2
 80001b8:	431a      	orrs	r2, r3
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	601a      	str	r2, [r3, #0]
	}else{
		pGPIOx->CRH &= ~(0xFU << (((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 8) * 4));
	    pGPIOx->CRH |= (((pGPIOHandle->GPIO_PinConfig.GPIO_PinCnf) << 2 | (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)) << (((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 8) * 4));
	    }
}
 80001be:	e01d      	b.n	80001fc <GPIO_Init+0x8c>
		pGPIOx->CRH &= ~(0xFU << (((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 8) * 4));
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	685a      	ldr	r2, [r3, #4]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	791b      	ldrb	r3, [r3, #4]
 80001c8:	3b08      	subs	r3, #8
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	210f      	movs	r1, #15
 80001ce:	fa01 f303 	lsl.w	r3, r1, r3
 80001d2:	43db      	mvns	r3, r3
 80001d4:	401a      	ands	r2, r3
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	605a      	str	r2, [r3, #4]
	    pGPIOx->CRH |= (((pGPIOHandle->GPIO_PinConfig.GPIO_PinCnf) << 2 | (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)) << (((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) - 8) * 4));
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	7992      	ldrb	r2, [r2, #6]
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	6879      	ldr	r1, [r7, #4]
 80001e6:	7949      	ldrb	r1, [r1, #5]
 80001e8:	4311      	orrs	r1, r2
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	7912      	ldrb	r2, [r2, #4]
 80001ee:	3a08      	subs	r2, #8
 80001f0:	0092      	lsls	r2, r2, #2
 80001f2:	fa01 f202 	lsl.w	r2, r1, r2
 80001f6:	431a      	orrs	r2, r3
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	605a      	str	r2, [r3, #4]
}
 80001fc:	bf00      	nop
 80001fe:	3714      	adds	r7, #20
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
	...

08000208 <GPIO_InterruptEn>:


//2) INTERRUPT MODE SET
void GPIO_InterruptEn(GPIO_Handle_t *pGPIOHandle)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT )
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	795b      	ldrb	r3, [r3, #5]
 8000214:	2b04      	cmp	r3, #4
 8000216:	d117      	bne.n	8000248 <GPIO_InterruptEn+0x40>
	{
		//configure the FTSR & if rtsr maybe enabled by default/accident, so  disable it
		EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000218:	4b51      	ldr	r3, [pc, #324]	@ (8000360 <GPIO_InterruptEn+0x158>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	7912      	ldrb	r2, [r2, #4]
 8000220:	4611      	mov	r1, r2
 8000222:	2201      	movs	r2, #1
 8000224:	408a      	lsls	r2, r1
 8000226:	4611      	mov	r1, r2
 8000228:	4a4d      	ldr	r2, [pc, #308]	@ (8000360 <GPIO_InterruptEn+0x158>)
 800022a:	430b      	orrs	r3, r1
 800022c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800022e:	4b4c      	ldr	r3, [pc, #304]	@ (8000360 <GPIO_InterruptEn+0x158>)
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	7912      	ldrb	r2, [r2, #4]
 8000236:	4611      	mov	r1, r2
 8000238:	2201      	movs	r2, #1
 800023a:	408a      	lsls	r2, r1
 800023c:	43d2      	mvns	r2, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a47      	ldr	r2, [pc, #284]	@ (8000360 <GPIO_InterruptEn+0x158>)
 8000242:	400b      	ands	r3, r1
 8000244:	6093      	str	r3, [r2, #8]
 8000246:	e035      	b.n	80002b4 <GPIO_InterruptEn+0xac>

	}
	else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT )
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	795b      	ldrb	r3, [r3, #5]
 800024c:	2b05      	cmp	r3, #5
 800024e:	d117      	bne.n	8000280 <GPIO_InterruptEn+0x78>
	{
		//configure the RTSR & disable FTSR if maybe enabled by accident
		EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000250:	4b43      	ldr	r3, [pc, #268]	@ (8000360 <GPIO_InterruptEn+0x158>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	7912      	ldrb	r2, [r2, #4]
 8000258:	4611      	mov	r1, r2
 800025a:	2201      	movs	r2, #1
 800025c:	408a      	lsls	r2, r1
 800025e:	43d2      	mvns	r2, r2
 8000260:	4611      	mov	r1, r2
 8000262:	4a3f      	ldr	r2, [pc, #252]	@ (8000360 <GPIO_InterruptEn+0x158>)
 8000264:	400b      	ands	r3, r1
 8000266:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000268:	4b3d      	ldr	r3, [pc, #244]	@ (8000360 <GPIO_InterruptEn+0x158>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	7912      	ldrb	r2, [r2, #4]
 8000270:	4611      	mov	r1, r2
 8000272:	2201      	movs	r2, #1
 8000274:	408a      	lsls	r2, r1
 8000276:	4611      	mov	r1, r2
 8000278:	4a39      	ldr	r2, [pc, #228]	@ (8000360 <GPIO_InterruptEn+0x158>)
 800027a:	430b      	orrs	r3, r1
 800027c:	6093      	str	r3, [r2, #8]
 800027e:	e019      	b.n	80002b4 <GPIO_InterruptEn+0xac>
	}
	else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	795b      	ldrb	r3, [r3, #5]
 8000284:	2b06      	cmp	r3, #6
 8000286:	d115      	bne.n	80002b4 <GPIO_InterruptEn+0xac>
	{
		//Configure both FTSR AND RTSR
		EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000288:	4b35      	ldr	r3, [pc, #212]	@ (8000360 <GPIO_InterruptEn+0x158>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	7912      	ldrb	r2, [r2, #4]
 8000290:	4611      	mov	r1, r2
 8000292:	2201      	movs	r2, #1
 8000294:	408a      	lsls	r2, r1
 8000296:	4611      	mov	r1, r2
 8000298:	4a31      	ldr	r2, [pc, #196]	@ (8000360 <GPIO_InterruptEn+0x158>)
 800029a:	430b      	orrs	r3, r1
 800029c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800029e:	4b30      	ldr	r3, [pc, #192]	@ (8000360 <GPIO_InterruptEn+0x158>)
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	7912      	ldrb	r2, [r2, #4]
 80002a6:	4611      	mov	r1, r2
 80002a8:	2201      	movs	r2, #1
 80002aa:	408a      	lsls	r2, r1
 80002ac:	4611      	mov	r1, r2
 80002ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000360 <GPIO_InterruptEn+0x158>)
 80002b0:	430b      	orrs	r3, r1
 80002b2:	6093      	str	r3, [r2, #8]

	}

	//2.Configure GPIO_PORT selection in AFIO_EXTICR REGISTERS
	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	791b      	ldrb	r3, [r3, #4]
 80002b8:	089b      	lsrs	r3, r3, #2
 80002ba:	73fb      	strb	r3, [r7, #15]
	uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	791b      	ldrb	r3, [r3, #4]
 80002c0:	f003 0303 	and.w	r3, r3, #3
 80002c4:	73bb      	strb	r3, [r7, #14]

	if (pGPIOHandle->pGPIOx == GPIOA) {
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a26      	ldr	r2, [pc, #152]	@ (8000364 <GPIO_InterruptEn+0x15c>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_InterruptEn+0xd6>
		AFIO->EXTICR[temp1] = 0 << (temp2 * 4);
 80002d0:	4a25      	ldr	r2, [pc, #148]	@ (8000368 <GPIO_InterruptEn+0x160>)
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
 80002d4:	3302      	adds	r3, #2
 80002d6:	2100      	movs	r1, #0
 80002d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002dc:	e029      	b.n	8000332 <GPIO_InterruptEn+0x12a>
	} else if (pGPIOHandle->pGPIOx == GPIOB) {
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a22      	ldr	r2, [pc, #136]	@ (800036c <GPIO_InterruptEn+0x164>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d10a      	bne.n	80002fe <GPIO_InterruptEn+0xf6>
	    AFIO->EXTICR[temp1] = 1 << (temp2 * 4);
 80002e8:	7bbb      	ldrb	r3, [r7, #14]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	2201      	movs	r2, #1
 80002ee:	fa02 f103 	lsl.w	r1, r2, r3
 80002f2:	4a1d      	ldr	r2, [pc, #116]	@ (8000368 <GPIO_InterruptEn+0x160>)
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	3302      	adds	r3, #2
 80002f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002fc:	e019      	b.n	8000332 <GPIO_InterruptEn+0x12a>
	} else if (pGPIOHandle->pGPIOx == GPIOC) {
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a1b      	ldr	r2, [pc, #108]	@ (8000370 <GPIO_InterruptEn+0x168>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d10a      	bne.n	800031e <GPIO_InterruptEn+0x116>
	    AFIO->EXTICR[temp1] = 2 << (temp2 * 4);
 8000308:	7bbb      	ldrb	r3, [r7, #14]
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	2202      	movs	r2, #2
 800030e:	fa02 f103 	lsl.w	r1, r2, r3
 8000312:	4a15      	ldr	r2, [pc, #84]	@ (8000368 <GPIO_InterruptEn+0x160>)
 8000314:	7bfb      	ldrb	r3, [r7, #15]
 8000316:	3302      	adds	r3, #2
 8000318:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800031c:	e009      	b.n	8000332 <GPIO_InterruptEn+0x12a>
	} else {
	    AFIO->EXTICR[temp1] = 3 << (temp2 * 4);
 800031e:	7bbb      	ldrb	r3, [r7, #14]
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	2203      	movs	r2, #3
 8000324:	fa02 f103 	lsl.w	r1, r2, r3
 8000328:	4a0f      	ldr	r2, [pc, #60]	@ (8000368 <GPIO_InterruptEn+0x160>)
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	3302      	adds	r3, #2
 800032e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	AFIO_PCLK_EN();
 8000332:	4b10      	ldr	r3, [pc, #64]	@ (8000374 <GPIO_InterruptEn+0x16c>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a0f      	ldr	r2, [pc, #60]	@ (8000374 <GPIO_InterruptEn+0x16c>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6193      	str	r3, [r2, #24]

	//3.Enable EXTI Interrupt delivery for the corresponding pin number  using IMR
	EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800033e:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <GPIO_InterruptEn+0x158>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	7912      	ldrb	r2, [r2, #4]
 8000346:	4611      	mov	r1, r2
 8000348:	2201      	movs	r2, #1
 800034a:	408a      	lsls	r2, r1
 800034c:	4611      	mov	r1, r2
 800034e:	4a04      	ldr	r2, [pc, #16]	@ (8000360 <GPIO_InterruptEn+0x158>)
 8000350:	430b      	orrs	r3, r1
 8000352:	6013      	str	r3, [r2, #0]
}
 8000354:	bf00      	nop
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40010400 	.word	0x40010400
 8000364:	40010800 	.word	0x40010800
 8000368:	40010000 	.word	0x40010000
 800036c:	40010c00 	.word	0x40010c00
 8000370:	40011000 	.word	0x40011000
 8000374:	40021000 	.word	0x40021000

08000378 <GPIO_WriteToOutputPin>:
	value = (uint16_t)pGPIOx->IDR;
	return value;
}

void GPIO_WriteToOutputPin(GPIO_Regdef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	70fb      	strb	r3, [r7, #3]
 8000384:	4613      	mov	r3, r2
 8000386:	70bb      	strb	r3, [r7, #2]
	if(Value ==  GPIO_PIN_SET){
 8000388:	78bb      	ldrb	r3, [r7, #2]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d109      	bne.n	80003a2 <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	78fa      	ldrb	r2, [r7, #3]
 8000394:	2101      	movs	r1, #1
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	431a      	orrs	r2, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	60da      	str	r2, [r3, #12]
	}
	else{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}

}
 80003a0:	e009      	b.n	80003b6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	68db      	ldr	r3, [r3, #12]
 80003a6:	78fa      	ldrb	r2, [r7, #3]
 80003a8:	2101      	movs	r1, #1
 80003aa:	fa01 f202 	lsl.w	r2, r1, r2
 80003ae:	43d2      	mvns	r2, r2
 80003b0:	401a      	ands	r2, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	60da      	str	r2, [r3, #12]
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <GPIO_TogglePin>:
	pGPIOx->ODR = Value;
}


void GPIO_TogglePin(GPIO_Regdef_t *pGPIOx, uint8_t PinNumber)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	460b      	mov	r3, r1
 80003ca:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<PinNumber);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	78fa      	ldrb	r2, [r7, #3]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f202 	lsl.w	r2, r1, r2
 80003d8:	405a      	eors	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	60da      	str	r2, [r3, #12]
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <GPIO_IRQInterruptConfig>:
 * Interrupt process
 */


//processor specific
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	460a      	mov	r2, r1
 80003f2:	71fb      	strb	r3, [r7, #7]
 80003f4:	4613      	mov	r3, r2
 80003f6:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 80003f8:	79bb      	ldrb	r3, [r7, #6]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d120      	bne.n	8000440 <GPIO_IRQInterruptConfig+0x58>
		if(IRQNumber <= 31){
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	2b1f      	cmp	r3, #31
 8000402:	d80a      	bhi.n	800041a <GPIO_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000404:	4b21      	ldr	r3, [pc, #132]	@ (800048c <GPIO_IRQInterruptConfig+0xa4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	79fa      	ldrb	r2, [r7, #7]
 800040a:	2101      	movs	r1, #1
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	4611      	mov	r1, r2
 8000412:	4a1e      	ldr	r2, [pc, #120]	@ (800048c <GPIO_IRQInterruptConfig+0xa4>)
 8000414:	430b      	orrs	r3, r1
 8000416:	6013      	str	r3, [r2, #0]
		else if(IRQNumber > 31 && IRQNumber < 64){
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
		}
	}

}
 8000418:	e032      	b.n	8000480 <GPIO_IRQInterruptConfig+0x98>
		else if(IRQNumber > 31 && IRQNumber < 64){
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	2b1f      	cmp	r3, #31
 800041e:	d92f      	bls.n	8000480 <GPIO_IRQInterruptConfig+0x98>
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	2b3f      	cmp	r3, #63	@ 0x3f
 8000424:	d82c      	bhi.n	8000480 <GPIO_IRQInterruptConfig+0x98>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000426:	4b1a      	ldr	r3, [pc, #104]	@ (8000490 <GPIO_IRQInterruptConfig+0xa8>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	79fa      	ldrb	r2, [r7, #7]
 800042c:	f002 021f 	and.w	r2, r2, #31
 8000430:	2101      	movs	r1, #1
 8000432:	fa01 f202 	lsl.w	r2, r1, r2
 8000436:	4611      	mov	r1, r2
 8000438:	4a15      	ldr	r2, [pc, #84]	@ (8000490 <GPIO_IRQInterruptConfig+0xa8>)
 800043a:	430b      	orrs	r3, r1
 800043c:	6013      	str	r3, [r2, #0]
}
 800043e:	e01f      	b.n	8000480 <GPIO_IRQInterruptConfig+0x98>
		if(IRQNumber <= 31){
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	2b1f      	cmp	r3, #31
 8000444:	d80a      	bhi.n	800045c <GPIO_IRQInterruptConfig+0x74>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000446:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <GPIO_IRQInterruptConfig+0xac>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	79fa      	ldrb	r2, [r7, #7]
 800044c:	2101      	movs	r1, #1
 800044e:	fa01 f202 	lsl.w	r2, r1, r2
 8000452:	4611      	mov	r1, r2
 8000454:	4a0f      	ldr	r2, [pc, #60]	@ (8000494 <GPIO_IRQInterruptConfig+0xac>)
 8000456:	430b      	orrs	r3, r1
 8000458:	6013      	str	r3, [r2, #0]
}
 800045a:	e011      	b.n	8000480 <GPIO_IRQInterruptConfig+0x98>
		else if(IRQNumber > 31 && IRQNumber < 64){
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	2b1f      	cmp	r3, #31
 8000460:	d90e      	bls.n	8000480 <GPIO_IRQInterruptConfig+0x98>
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b3f      	cmp	r3, #63	@ 0x3f
 8000466:	d80b      	bhi.n	8000480 <GPIO_IRQInterruptConfig+0x98>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000468:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <GPIO_IRQInterruptConfig+0xb0>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	79fa      	ldrb	r2, [r7, #7]
 800046e:	f002 021f 	and.w	r2, r2, #31
 8000472:	2101      	movs	r1, #1
 8000474:	fa01 f202 	lsl.w	r2, r1, r2
 8000478:	4611      	mov	r1, r2
 800047a:	4a07      	ldr	r2, [pc, #28]	@ (8000498 <GPIO_IRQInterruptConfig+0xb0>)
 800047c:	430b      	orrs	r3, r1
 800047e:	6013      	str	r3, [r2, #0]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	e000e100 	.word	0xe000e100
 8000490:	e000e104 	.word	0xe000e104
 8000494:	e000e180 	.word	0xe000e180
 8000498:	e000e184 	.word	0xe000e184

0800049c <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	6039      	str	r1, [r7, #0]
 80004a6:	71fb      	strb	r3, [r7, #7]

	//1. FIND OUT IPR REGISTER
	uint8_t iprx = IRQNumber/4;
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber%4;
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	f003 0303 	and.w	r3, r3, #3
 80004b4:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8*iprx_section)+(8-NO_PR_BITS_IMPLEMENTED);
 80004b6:	7bbb      	ldrb	r3, [r7, #14]
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	3304      	adds	r3, #4
 80004be:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASEADDR + iprx) |= (IRQPriority << shift_amount);
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80004c8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80004cc:	6819      	ldr	r1, [r3, #0]
 80004ce:	7b7b      	ldrb	r3, [r7, #13]
 80004d0:	683a      	ldr	r2, [r7, #0]
 80004d2:	409a      	lsls	r2, r3
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80004dc:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80004e0:	430a      	orrs	r2, r1
 80004e2:	601a      	str	r2, [r3, #0]


}
 80004e4:	bf00      	nop
 80004e6:	3714      	adds	r7, #20
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
	...

080004f0 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
	//1. clear the EXTI PR Register corresponding to pin number
	if(EXTI->PR & (1<< PinNumber)){
 80004fa:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <GPIO_IRQHandling+0x3c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	79fa      	ldrb	r2, [r7, #7]
 8000500:	2101      	movs	r1, #1
 8000502:	fa01 f202 	lsl.w	r2, r1, r2
 8000506:	4013      	ands	r3, r2
 8000508:	2b00      	cmp	r3, #0
 800050a:	d009      	beq.n	8000520 <GPIO_IRQHandling+0x30>

		//Clear the PR, i.e; Writing 1 to the PR
		EXTI->PR |= (1<<PinNumber);
 800050c:	4b07      	ldr	r3, [pc, #28]	@ (800052c <GPIO_IRQHandling+0x3c>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	79fa      	ldrb	r2, [r7, #7]
 8000512:	2101      	movs	r1, #1
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	4611      	mov	r1, r2
 800051a:	4a04      	ldr	r2, [pc, #16]	@ (800052c <GPIO_IRQHandling+0x3c>)
 800051c:	430b      	orrs	r3, r1
 800051e:	6153      	str	r3, [r2, #20]
	}

}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40010400 	.word	0x40010400

08000530 <delay>:

#include"stm32f103xx.h"
#include"stm32f103xx_gpio_driver.h"

void delay(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
	for (uint32_t i=0 ; i<500000; i++);
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	e002      	b.n	8000542 <delay+0x12>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3301      	adds	r3, #1
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <delay+0x28>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d9f8      	bls.n	800053c <delay+0xc>
}
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	0007a11f 	.word	0x0007a11f

0800055c <main>:

int main(){
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GPIOLed;

	GPIOB_PCLK_EN();
 8000562:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <main+0x94>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a22      	ldr	r2, [pc, #136]	@ (80005f0 <main+0x94>)
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	6193      	str	r3, [r2, #24]
	memset(&GPIOLed,0,sizeof(GPIOLed));
 800056e:	463b      	mov	r3, r7
 8000570:	2208      	movs	r2, #8
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f000 f87c 	bl	8000672 <memset>
	memset(&GPIOBtn,0,sizeof(GPIOBtn));
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	2208      	movs	r2, #8
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f875 	bl	8000672 <memset>

	GPIOBtn.pGPIOx = GPIOB;
 8000588:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <main+0x98>)
 800058a:	60bb      	str	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 800058c:	230a      	movs	r3, #10
 800058e:	733b      	strb	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000590:	2304      	movs	r3, #4
 8000592:	737b      	strb	r3, [r7, #13]
	GPIOBtn.GPIO_PinConfig.GPIO_PinCnf = GPIO_IN_PUPD;
 8000594:	2302      	movs	r3, #2
 8000596:	73bb      	strb	r3, [r7, #14]


	GPIOA_PCLK_EN();
 8000598:	4b15      	ldr	r3, [pc, #84]	@ (80005f0 <main+0x94>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a14      	ldr	r2, [pc, #80]	@ (80005f0 <main+0x94>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
	GPIO_Init(&GPIOBtn);
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fde1 	bl	8000170 <GPIO_Init>
	GPIO_InterruptEn(&GPIOBtn);
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fe28 	bl	8000208 <GPIO_InterruptEn>

	GPIOLed.pGPIOx = GPIOC;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <main+0x9c>)
 80005ba:	603b      	str	r3, [r7, #0]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80005bc:	2300      	movs	r3, #0
 80005be:	713b      	strb	r3, [r7, #4]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT_2HZ;
 80005c0:	2302      	movs	r3, #2
 80005c2:	717b      	strb	r3, [r7, #5]
	GPIOLed.GPIO_PinConfig.GPIO_PinCnf = GPIO_OUT_GP_PP;
 80005c4:	2300      	movs	r3, #0
 80005c6:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&GPIOLed);
 80005c8:	463b      	mov	r3, r7
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fdd0 	bl	8000170 <GPIO_Init>


	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);//off the led first
 80005d0:	2201      	movs	r2, #1
 80005d2:	2100      	movs	r1, #0
 80005d4:	4809      	ldr	r0, [pc, #36]	@ (80005fc <main+0xa0>)
 80005d6:	f7ff fecf 	bl	8000378 <GPIO_WriteToOutputPin>

	//IRQ CONFIG FOR BUTTON PIN
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI15);
 80005da:	210f      	movs	r1, #15
 80005dc:	2028      	movs	r0, #40	@ 0x28
 80005de:	f7ff ff5d 	bl	800049c <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 80005e2:	2101      	movs	r1, #1
 80005e4:	2028      	movs	r0, #40	@ 0x28
 80005e6:	f7ff feff 	bl	80003e8 <GPIO_IRQInterruptConfig>
	//ISR Implementation

    while(1);
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x8e>
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010c00 	.word	0x40010c00
 80005f8:	40011000 	.word	0x40011000
 80005fc:	40010800 	.word	0x40010800

08000600 <EXTI15_10_IRQHandler>:

}



void EXTI15_10_IRQHandler(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	delay();
 8000604:	f7ff ff94 	bl	8000530 <delay>

	GPIO_IRQHandling(GPIO_PIN_10);//clear the pending event from exti line
 8000608:	200a      	movs	r0, #10
 800060a:	f7ff ff71 	bl	80004f0 <GPIO_IRQHandling>
	GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800060e:	2100      	movs	r1, #0
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <EXTI15_10_IRQHandler+0x1c>)
 8000612:	f7ff fed5 	bl	80003c0 <GPIO_TogglePin>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40010800 	.word	0x40010800

08000620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000620:	480d      	ldr	r0, [pc, #52]	@ (8000658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000622:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000624:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000628:	480c      	ldr	r0, [pc, #48]	@ (800065c <LoopForever+0x6>)
  ldr r1, =_edata
 800062a:	490d      	ldr	r1, [pc, #52]	@ (8000660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800062c:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <LoopForever+0xe>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000640:	4c0a      	ldr	r4, [pc, #40]	@ (800066c <LoopForever+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064e:	f000 f819 	bl	8000684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000652:	f7ff ff83 	bl	800055c <main>

08000656 <LoopForever>:

LoopForever:
  b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   r0, =_estack
 8000658:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000664:	080006ec 	.word	0x080006ec
  ldr r2, =_sbss
 8000668:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800066c:	2000001c 	.word	0x2000001c

08000670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC1_2_IRQHandler>

08000672 <memset>:
 8000672:	4603      	mov	r3, r0
 8000674:	4402      	add	r2, r0
 8000676:	4293      	cmp	r3, r2
 8000678:	d100      	bne.n	800067c <memset+0xa>
 800067a:	4770      	bx	lr
 800067c:	f803 1b01 	strb.w	r1, [r3], #1
 8000680:	e7f9      	b.n	8000676 <memset+0x4>
	...

08000684 <__libc_init_array>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	2600      	movs	r6, #0
 8000688:	4d0c      	ldr	r5, [pc, #48]	@ (80006bc <__libc_init_array+0x38>)
 800068a:	4c0d      	ldr	r4, [pc, #52]	@ (80006c0 <__libc_init_array+0x3c>)
 800068c:	1b64      	subs	r4, r4, r5
 800068e:	10a4      	asrs	r4, r4, #2
 8000690:	42a6      	cmp	r6, r4
 8000692:	d109      	bne.n	80006a8 <__libc_init_array+0x24>
 8000694:	f000 f81a 	bl	80006cc <_init>
 8000698:	2600      	movs	r6, #0
 800069a:	4d0a      	ldr	r5, [pc, #40]	@ (80006c4 <__libc_init_array+0x40>)
 800069c:	4c0a      	ldr	r4, [pc, #40]	@ (80006c8 <__libc_init_array+0x44>)
 800069e:	1b64      	subs	r4, r4, r5
 80006a0:	10a4      	asrs	r4, r4, #2
 80006a2:	42a6      	cmp	r6, r4
 80006a4:	d105      	bne.n	80006b2 <__libc_init_array+0x2e>
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ac:	4798      	blx	r3
 80006ae:	3601      	adds	r6, #1
 80006b0:	e7ee      	b.n	8000690 <__libc_init_array+0xc>
 80006b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b6:	4798      	blx	r3
 80006b8:	3601      	adds	r6, #1
 80006ba:	e7f2      	b.n	80006a2 <__libc_init_array+0x1e>
 80006bc:	080006e4 	.word	0x080006e4
 80006c0:	080006e4 	.word	0x080006e4
 80006c4:	080006e4 	.word	0x080006e4
 80006c8:	080006e8 	.word	0x080006e8

080006cc <_init>:
 80006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ce:	bf00      	nop
 80006d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d2:	bc08      	pop	{r3}
 80006d4:	469e      	mov	lr, r3
 80006d6:	4770      	bx	lr

080006d8 <_fini>:
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006da:	bf00      	nop
 80006dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006de:	bc08      	pop	{r3}
 80006e0:	469e      	mov	lr, r3
 80006e2:	4770      	bx	lr
